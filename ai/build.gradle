apply plugin: "java"

sourceCompatibility = 1.8
sourceSets.main.java.srcDirs = [ "src/" ]

//I don't think that all compilations should need a dependency on junit, but I"m too lazy to figure out how to make this
// run otherwise.  Hell, I'm too lazy to fix that typo in the line above.
dependencies {
    compile group: 'junit', name: 'junit', version: '4.+'
}

project.ext.mainClassName = "com.teamquixote.ai.launchers.AiLauncher"
project.ext.assetsDir = new File("../android/assets");

task run(dependsOn: classes, type: JavaExec) {
    main = project.mainClassName
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true
}

task headless(dependsOn:classes, type: JavaExec) {
    main = "com.teamquixote.ai.launchers.HeadlessLauncher"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir

    dependencies {
        compile "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
        compile "org.mockito:mockito-core:1.+"
    }
}

task persistent(dependsOn:classes, type: JavaExec) {
    main = "com.teamquixote.ai.launchers.PersistentLauncher"
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.assetsDir
    ignoreExitValue = true

    if(project.hasProperty("saveDirectory") && project.hasProperty("gameStateFile"))
        args project.getProperty("saveDirectory"), project.getProperty("gameStateFile")
}

task dist(type: Jar) {
    from files(sourceSets.main.output.classesDir)
    from files(sourceSets.main.output.resourcesDir)
    from {configurations.compile.collect {zipTree(it)}}
    from files(project.assetsDir);

    manifest {
        attributes 'Main-Class': project.mainClassName
        attributes 'Specification-Version': version
        attributes 'Implementation-Version': versionCode
    }
}

dist.dependsOn classes

eclipse {
    project {
        name = appName + "-ai"
        linkedResource name: 'assets', type: '2', location: 'PARENT-1-PROJECT_LOC/android/assets'
    }
}

task afterEclipseImport(description: "Post processing after project generation", group: "IDE") {
    doLast {
        def classpath = new XmlParser().parse(file(".classpath"))
        new Node(classpath, "classpathentry", [ kind: 'src', path: 'assets' ]);
        def writer = new FileWriter(file(".classpath"))
        def printer = new XmlNodePrinter(new PrintWriter(writer))
        printer.setPreserveWhitespace(true)
        printer.print(classpath)
    }
}